services:
  postgres:
    image: postgres:15
    container_name: postgres_db
    restart: always
    environment:
      POSTGRES_DB: personalWebpage_db
      POSTGRES_USER: Krusovice
      POSTGRES_PASSWORD: fedefrede
      POSTGRES_MULTIPLE_DATABASES: personalWebpage_db,airflow
    volumes:
      - ./postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - shared_network
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "Krusovice", "-d", "personalWebpage_db"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 5s

  django:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: django_app
    command: >
          bash -c "python manage.py migrate &&
                   python manage.py collectstatic --noinput &&
                   chown -R www-data:www-data /personalWebpage/django/staticfiles &&
                   chmod -R 755 /personalWebpage/django/staticfiles &&                   
                   daphne -b 0.0.0.0 -p 8000 personalWebpage.asgi:application"
#                   python manage.py runserver 0.0.0.0:8000 &
    volumes:
      - ./django:/personalWebpage/django
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    environment:
      - DATABASE_URL=postgres://Krusovice:fedefrede@postgres_db:5432/personalWebpage_db
      - REDIS_HOST=redis
    networks:
      - shared_network

  nginx:
    image: nginx:latest
    container_name: nginx_reverse_proxy
    volumes:
      #- ./nginx_dev.conf:/etc/nginx/nginx.conf # Comment for production
      - ./nginx.conf:/etc/nginx/nginx.conf # Uncomment for production
      - ./conf.d:/etc/nginx/conf.d
      - ./django/staticfiles:/personalWebpage/django/staticfiles
      - ./django/media:/personalWebpage/django/media
      - /etc/letsencrypt/:/etc/letsencrypt # Uncomment for production
    ports:
      - "80:80"
      - "443:443"  # Expose port 443 for HTTPS
    depends_on:
      - django
    networks:
      - shared_network


  airflow-webserver:
    image: apache/airflow:2.10.5
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres_db/airflow
      - AIRFLOW__CORE__LOAD_DEFAULT_CONNECTIONS=False
      - AIRFLOW_CONN_POSTGRES_DEFAULT=postgresql+psycopg2://airflow:airflow@postgres_db/personalWebpage_db
    command: [ "bash", "-c", "pip install -r /requirements.txt && exec airflow webserver" ]
    ports:
      - "8080:8080"
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins
      - ./airflow/requirements.txt:/requirements.txt
    depends_on:
      - airflow-init
    restart: always
    networks:
      - shared_network

  airflow-scheduler:
    image: apache/airflow:2.10.5
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres_db/airflow
      - AIRFLOW__CORE__LOAD_DEFAULT_CONNECTIONS=False
      - AIRFLOW_CONN_POSTGRES_DEFAULT=postgresql+psycopg2://airflow:airflow@postgres_db/personalWebpage_db
    command: [ "bash", "-c", "pip install -r /requirements.txt && exec airflow scheduler" ]
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins
      - ./airflow/requirements.txt:/requirements.txt
    depends_on:
      - airflow-init
    restart: always
    networks:
      - shared_network

  airflow-cli:
    image: apache/airflow:2.10.5
    environment:
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres_db/airflow
      - AIRFLOW_CONN_POSTGRES_DEFAULT=postgresql+psycopg2://airflow:airflow@postgres_db/personalWebpage_db
    command: ["bash"]
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins
      - ./airflow/requirements.txt:/requirements.txt
    depends_on:
      - airflow-init
    networks:
      - shared_network

  airflow-init:
    image: apache/airflow:2.10.5
    entrypoint: /bin/bash
    command:
      - -c
      - |
        airflow db upgrade
        exec airflow users create \
          --username airflow \
          --password airflow \
          --firstname Airflow \
          --lastname Admin \
          --role Admin \
          --email admin@example.com
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres_db/airflow
    restart: on-failure
    networks:
      - shared_network

  # Zookeeper service for Kafka
  zookeeper:
    image: wurstmeister/zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    ports:
      - "2181:2181"
    networks:
      - kafka_network
      - shared_network

  # Kafka service
  kafka:
    image: wurstmeister/kafka:latest
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    networks:
      - kafka_network
      - shared_network
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "9092"]
      interval: 10s
      retries: 5

  # Producer service
  producer:
    build:
      context: ./kafka/producer  # Path to the producer folder
      dockerfile: Dockerfile
    volumes:
      - ./kafka/producer:/app  # Mount the producer folder into the container
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - kafka_network
      - shared_network
    environment:
      - BOOTSTRAP_SERVERS=kafka:9092
    restart: always

  # Consumer service
  consumer:
    build:
      context: ./kafka/consumer  # Path to the consumer folder
      dockerfile: Dockerfile
    volumes:
      - ./kafka/consumer:/app
      - ./django:/app/django_app
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - kafka_network
      - shared_network
    environment:
      - BOOTSTRAP_SERVERS=kafka:9092
    restart: always

  redis:
    image: redis:alpine
    ports:
      - "6379:6379"
    networks:
      - shared_network

networks:
  kafka_network:
    driver: bridge
  shared_network:
    driver: bridge

volumes:
  postgres_data:
